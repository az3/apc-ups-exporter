name: CI

on:
  push:
    paths:
      - 'source/**.go'
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile'
      - '.github/workflows/ci.yml'
    branches:
      - '**'
    tags:
     - '*.*.*'
  workflow_dispatch:

env:
  EXECUTABLE_BASE_NAME: apc-ups-exporter
  DOCKER_IMAGE_NAME: apc-ups-exporter
  DOCKER_REGISTRY_DOMAIN: ghcr.io

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        name: [ 'Windows', 'Linux - glibc', 'Linux - musl' ]
        include:
          - name: Windows
            runner: windows-2022
            os: windows
            arch: amd64
          - name: Linux - glibc
            runner: ubuntu-22.04
            os: linux
            arch: amd64
            library: glibc
          - name: Linux - musl
            runner: ubuntu-22.04
            os: linux
            arch: amd64
            library: musl
    permissions:
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20

      - name: Install build tools
        if: ${{ matrix.library == 'musl' }}
        run: sudo apt-get install --no-install-recommends --yes musl-tools

      - name: Construct artifact & executable names
        id: name
        env:
          OPERATING_SYSTEM: ${{ matrix.os }}
          ARCHITECTURE: ${{ matrix.arch }}
          LIBRARY: ${{ matrix.library }}
        uses: actions/github-script@v6
        with:
          script: |
            const { EXECUTABLE_BASE_NAME, OPERATING_SYSTEM, ARCHITECTURE, LIBRARY } = process.env;
            const name = `${ EXECUTABLE_BASE_NAME }-${ OPERATING_SYSTEM }-${ ARCHITECTURE }${ LIBRARY != "" ? "-" + LIBRARY : "" }`;
            core.setOutput( "artifact", name );
            core.setOutput( "executable", `${name}${ OPERATING_SYSTEM == "windows" ? ".exe" : "" }` );

      - name: Build project
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CC: ${{ matrix.library == 'musl' && '/usr/bin/musl-gcc' || '' }}
        run: go build -v -ldflags='-s -w' -o ${{ steps.name.outputs.executable }} ./source/

      - name: Strip debug symbols from executable
        run: strip ${{ steps.name.outputs.executable }}

      - name: Display executable information
        run: file ${{ steps.name.outputs.executable }} && sha256sum ${{ steps.name.outputs.executable }}

      - name: Upload executable as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.name.outputs.artifact }}
          path: ${{ steps.name.outputs.executable }}

  docker:
    name: Docker
    runs-on: ubuntu-22.04
    needs: build
    strategy:
      matrix:
        name: [ 'Ubuntu', 'Alpine' ]
        include:
          - name: Ubuntu
            suffix: ubuntu
            image: ubuntu:22.10
            library: glibc
          - name: Alpine
            suffix: alpine
            image: alpine:3.17
            library: musl
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64
          driver-opts: image=moby/buildkit:v0.10.6

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name == 'push' && github.event.pull_request == null && !startsWith( github.ref, 'refs/heads/dependabot/' ) }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY_DOMAIN }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download executable artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.EXECUTABLE_BASE_NAME }}-linux-amd64-${{ matrix.library }}
          path: ./artifact/

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
          flavor: |
            latest=${{ matrix.name == 'Ubuntu' }}
            suffix=-${{ matrix.suffix }},onlatest=${{ matrix.name == 'Alpine' }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
          labels: |
            org.opencontainers.image.title=APC UPS Exporter (${{matrix.name}}-based)
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            com.docker.extension.publisher-url=https://viral32111.com

      - name: Build & push Docker image
        uses: docker/build-push-action@v4
        with:
          push: ${{ github.event_name == 'push' && github.event.pull_request == null && !startsWith( github.ref, 'refs/heads/dependabot/' ) }}
          file: ./Dockerfile
          context: ./artifact/
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: BASE_IMAGE=${{ matrix.image }}
          no-cache: true
          pull: true

      - name: Delete untagged Docker images
        if: ${{ github.event_name == 'push' && github.event.pull_request == null && !startsWith( github.ref, 'refs/heads/dependabot/' ) }}
        uses: snok/container-retention-policy@v2
        with:
          image-names: ${{ env.DOCKER_IMAGE_NAME }}
          cut-off: 0 seconds ago UTC
          keep-at-least: 0
          untagged-only: true
          account-type: personal
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_PACKAGES }}

  release:
    name: Release
    runs-on: ubuntu-22.04
    needs: docker
    if: ${{ github.event_name == 'push' && github.event.pull_request == null && !startsWith( github.ref, 'refs/heads/dependabot/' ) && github.ref_type == 'tag' }}
    permissions:
      contents: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Download executable artifacts
        uses: actions/download-artifact@v3

      - name: Create draft release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ github.ref_name }}
          body: ${{ github.ref_name }}
          files: ${{ env.EXECUTABLE_BASE_NAME }}-*/*
          token: ${{ secrets.GITHUB_TOKEN }}
